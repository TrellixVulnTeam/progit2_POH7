=== Giới thiệu về Version Control

(((version control)))
`version control` là gì, tại sao bạn cần chúng?
Version control là 1 phần mềm lưu lại những sự thay đổi của 1 hoặc 1 nhóm file theo thời gian, mà nhờ đó bạn có thể lấy được thông tin thay đổi tại 1 thời điểm bất kỳ (1 version bất kỳ) trong quá khứ. 
Trong cuốn sách này, chúng ta sẽ lấy ví dụ bằng việc quản lý version của các file source code, trong thực tế bạn có thể lưu thay đổi (version) của hầu hết các file mà computer hỗ trợ.
sẽ
Nếu bạn là 1 nhà thiết kế đồ hoạ hoặc thiết kế web, bạn có thể sẽ dùng VCS (công cụ quản lý version - version control system) để lưu giữ tất cả các thay đổi liên quan đến image (hình ảnh) hoặc layout (bố cục trang web).

Nhơ vậy, bạn có thể dễ dàng so sánh sự thay đổi của các phiên bản, nắm được ai là người chỉnh sửa, chỉnh sửa nào phát sinh ra vấn đề, v.v.
Hay như bạn có thể dùng VCS để lấy lại file chẳng may xoá nhầm.
Đặc biệt, bạn sẽ đạt được tất cả những lợi ích trên chỉ với 1 chút công sức, cũng như tài nguyên máy tính.

==== Local Version Control Systems (Version control ở phạm vi nội bộ máy tính cá nhân)

(((version control,local)))
Có nhiều cách để quản lý version của file khác nhau, ví dụ như nhiều người sẽ dùng cách copy file sang 1 folder khác (hoặc gắn time-stamped vào tên của folder).
Cách làm này rất phổ biến và đơn giản, nhưng cũng rất dễ bị mắc lỗi 
Ví dụ như bạn có thể nhầm lần giữa các folder, xoá nhầm file hoặc copy không đúng file mà bạn mong muốn.

Để giải quyết vấn đề này, các programmer từ rất lâu đã phát triển những phần mềm VCS, lưu giữ tất cả các thay đổi của file vào 1 database nho nhỏ chạy ở local.

.Local version control
image::images/local.png[Local version control diagram]

1 trong những phần mềm VCS phổ biến nhất, vẫn được sử dụng rất nhiều hiện này có tên là RCS
https://www.gnu.org/software/rcs/[RCS] hoạt động bằng cách lưu giữ những bộ patch (những thay đổi giữa các file) bằng định dạng đặc biệt trên ổ đĩa; phần mềm có thể tái tạo lại nội dung file ở 1 thời điểm bất kỳ bằng kết hợp tất cả các patch này.

==== Công cụ quản lý version tập trung (Centralized Version Control Systems)

(((version control,centralized)))
Vấn đề tiếp theo nhiều người gặp phải là khi có nhiều nhà phát triển (developer) cùng làm việc trên 1 hệ thống. 
`Centralized Version Control Systems (CVCs)` sinh ra để giải quyết vấn đề này 
Những công cụ CVCs này (ví dụ như phần mềm CVS, Subversion, Perforce) có 1 server chung chứa tất cả version của file, người sử dụng sẽ tải những file này từ server tập trung này. (((CVS)))(((Subversion)))(((Perforce)))
Công cụ này đã từng là `standard` trong rất nhiều năm.

.Centralized version control
image::images/centralized.png[Centralized version control diagram]

Phương pháp này có rất nhiều ưu điểm, đặc biệt so với local VCS.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCSs suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.

.Distributed version control
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
